{% extends 'base.html.twig' %}

{% block title %}Create template
{% endblock %}

{% block body %}
	<section data-controller="form" class="p-6 bg-gray-100">
		<h1 class="text-2xl font-bold mb-4 text-primary">Modifiez votre template</h1>
		<div class="flex">
			<div class="w-1/3 pr-4 ml-10">
				<a href="/" class="rounded-lg border border-secondary px-4 py-2 text-primary font-bold">Changer de template</a>

				<div id="templateEditPane" class="tab-pane bg-secondary p-4 rounded shadow mt-5">
					<div class="flex">
						<button id="templateEditBtn" class="bg-clear text-primary py-2 px-4 rounded w-1/2 selected">Paramètres du template</button>
						<button id="elementEditBtn" class="bg-clear text-primary py-2 px-4 rounded w-1/2">Propriété de l'élément</button>
					</div>
					{{ form_start(form) }}

					{{ form_widget(form) | raw }}
					<label for="color" class="text-white mt-2">Couleur :</label>
					<div class="flex items-center flex-row flex-wrap gap-3 mt-3">
						{% for color in template.color %}
							<input type="color" name="color" value="{{ color }}" class="w-8 h-8" disabled>
						{% endfor %}
					</div>
					{{ form_end(form) }}
				</div>
				<div id="elementEditPane" class="tab-pane bg-secondary p-4 rounded shadow hidden mt-5">
					<div class="flex">
						<button id="templateEditBtn1" class="bg-clear text-primary py-2 px-4 rounded w-1/2">Paramètres du template</button>
						<button id="elementEditBtn1" class="bg-clear text-primary py-2 px-4 rounded w-1/2 selected">Propriété de l'élément</button>
					</div>
					<div>
						<turbo-frame id="formContainer" data-form-target="formContainer" class="w-full"><!-- Le formulaire sera injecté ici --></turbo-frame>
					</div>
				</div>
				<a href="{{ path('app_home', {'id': template.id}) }}" class="rounded-lg border border-secondary px-4 py-2 text-primary font-bold block w-fit mt-5">Enregistrer le template</a>
			</div>

			<div class="w-2/3 pl-4">
				<div class="flex mb-4 justify-around">
					<button data-action="click->form#loadForm" data-url="{{ path('form_image') }}" class="bg-orangeCustom text-white py-1 px-2 rounded mb-2 flex flex-col items-center">
						<img src="{{ asset('images/image.png') }}" alt="Ajouter Image" class="h-14 mb-1">
						Ajouter Image
					</button>

					<button data-action="click->form#loadForm" data-url="{{ path('form_qrcode') }}" class="bg-orangeCustom text-white py-1 px-2 rounded mb-2 flex flex-col items-center">
						<img src="{{ asset('images/qrCode.png') }}" alt="Ajouter QrCode" class="h-14 mb-1">
						Ajouter QR Code
					</button>
					<button id="addText" data-action="click->form#loadForm" data-url="{{ path('form_text') }}" class="bg-orangeCustom text-white py-1 px-2 rounded mb-2 flex flex-col items-center">
						<img src="{{ asset('images/text.png') }}" alt="Ajouter Text" class="h-14 mb-1">
						Ajouter Texte
					</button>
				</div>

				<div id="canvas-container" class="canvas-area bg-white w-fit mx-auto rounded shadow mt-4" data-template-width="{{template.width}}" data-template-height="{{template.height}}"></div>
			</div>
		</div>
	</section>

	<style>
		.selected {
			background-color: #18534F;
			color: white;
		}

		.canvas {
			text-align: center;
		}

		.draggable {
			position: absolute;
			cursor: move;
			padding: 10px;
			background-color: lightblue;
			border: 1px solid #ccc;
			border-radius: 4px;
		}
	</style>
	<script>
		document.addEventListener('DOMContentLoaded', function () {
var templateEditBtn1 = document.getElementById('templateEditBtn1');
var elementEditBtn1 = document.getElementById('elementEditBtn1');
var templateEditBtn = document.getElementById('templateEditBtn');
var elementEditBtn = document.getElementById('elementEditBtn');
var templateEditPane = document.getElementById('templateEditPane');
var elementEditPane = document.getElementById('elementEditPane');
var uniqIdText = 0;
let selectedElement = null;
let zoomFactor = 1;

templateEditBtn1.addEventListener('click', function () {
templateEditPane.classList.remove('hidden');
elementEditPane.classList.add('hidden');
templateEditBtn.classList.add('selected');
elementEditBtn.classList.remove('selected');
});

elementEditBtn.addEventListener('click', function () {
elementEditPane.classList.remove('hidden');
templateEditPane.classList.add('hidden');
elementEditBtn.classList.add('selected');
templateEditBtn.classList.remove('selected');
});

templateEditBtn.click();

let canvas = document.getElementById("canvas-container");
let addTextBtn = document.getElementById("addText");
let newTop = 0;
let newLeft = 0;

addTextBtn.addEventListener("click", function () {
let newText = document.createElement("div");
newText.classList.add("draggable");
newText.innerText = "Déplacez-moi !";
newText.style.position = "absolute";
newText.style.top = "0px";
newText.style.left = "0px";
uniqIdText = "text" + Math.random().toString(36).substr(2, 9);
newText.id = uniqIdText;
canvas.appendChild(newText);

makeDraggable(newText);

// Créer l'élément en BDD
createElementInDB(newText);
});

function makeDraggable(element) {
let isDragging = false;
let offsetX,
offsetY;
let canvasRect = canvas.getBoundingClientRect();

element.addEventListener("mousedown", function (e) {
isDragging = true;
offsetX = (e.clientX - parseInt(window.getComputedStyle(element).left)) / zoomFactor;
offsetY = (e.clientY - parseInt(window.getComputedStyle(element).top)) / zoomFactor;
});

document.addEventListener("mousemove", function (e) {
if (isDragging) {
newLeft = (e.clientX - offsetX * zoomFactor);
newTop = (e.clientY - offsetY * zoomFactor);

let elementRect = element.getBoundingClientRect();

if (newLeft < 0) 
newLeft = 0;



if (newTop < 0) 
newTop = 0;



if (newLeft + elementRect.width > canvasRect.width * zoomFactor) {
newLeft = canvasRect.width * zoomFactor - elementRect.width;
}
if (newTop + elementRect.height > canvasRect.height * zoomFactor) {
newTop = canvasRect.height * zoomFactor - elementRect.height;
}

element.style.left = newLeft / zoomFactor + "px";
element.style.top = newTop / zoomFactor + "px";

if (selectedElement === element) {
let sliderValue = Math.round((newLeft / canvasRect.width) * 100);
let sliderValueY = Math.round((newTop / canvasRect.height) * 100);
document.getElementById('text_posX').value = sliderValue;
document.getElementById('text_posY').value = sliderValueY;
}
}
});

document.addEventListener("mouseup", function () {
if (isDragging) {
isDragging = false;
updateElementInDB(element);
}
});

element.addEventListener('click', function (event) {
selectedElement = this;

let canvasRect = canvas.getBoundingClientRect();
let elementRect = selectedElement.getBoundingClientRect();
let posX = Math.round(((elementRect.left - canvasRect.left) / canvasRect.width) * 100);
let posY = Math.round(((elementRect.top - canvasRect.top) / canvasRect.height) * 100);
document.getElementById('text_posX').value = posX;
document.getElementById('text_posY').value = posY;
});

let textPosX = document.getElementById('text_posX');
let textPosY = document.getElementById('text_posY');
if (textPosX && textPosY) {
textPosX.addEventListener('input', function () {
selectedElement.style.left = this.value + '%';
});
textPosY.addEventListener('input', function () {
selectedElement.style.top = this.value + '%';
});
}
}

function createElementInDB(element) {
let data = {
type: 'text', // ou 'image' ou 'qrcode' selon le type d'élément
posX: element.style.left,
posY: element.style.top,
width: element.offsetWidth,
height: element.offsetHeight,
// Ajouter d'autres propriétés spécifiques à l'élément ici
};
g

fetch('/create-template/add-element', {
method: 'POST',
headers: {
'Content-Type': 'application/json'
},
body: JSON.stringify(data)
}).then(response => {
if (!response.ok) {
throw new Error('Network response was not ok');
}
return response.json();
}).then(data => {
console.log('Response Data:', data);
if (data.id) {
element.dataset.id = data.id; // Assigner l'ID retourné par le serveur à l'élément
} else {
console.error('Error:', data.error);
}
}).catch(error => console.error('Error:', error));
}

function updateElementInDB(element) {
if (! element.dataset.id) {
console.error('Error: Element ID is not defined.');
return;
}

let data = {
id: element.dataset.id,
posX: element.style.left,
posY: element.style.top,
width: element.offsetWidth,
height: element.offsetHeight,
// Ajouter d'autres propriétés spécifiques à l'élément ici
};

fetch(`/create-template/add-element/`, {
method: 'POST',
headers: {
'Content-Type': 'application/json',
'X-Requested-With': 'XMLHttpRequest'
},
body: JSON.stringify(data)
}).then(response => {
if (!response.ok) {
throw new Error('Network response was not ok');
}
}).catch(error => console.error('Error:', error));
}

let templateWidth = document.getElementById('canvas-container').dataset.templateWidth;
let templateHeight = document.getElementById('canvas-container').dataset.templateHeight;
let canvaDiv = document.getElementById('canvas-container');

let canvasElement = document.createElement('canvas');
canvasElement.id = 'canvas';
canvasElement.width = templateWidth;
canvasElement.height = templateHeight;
canvaDiv.appendChild(canvasElement);
canvaDiv.style.position = 'absolute';

let elements = document.querySelectorAll('.draggable');
elements.forEach(element => {
let elementRect = element.getBoundingClientRect();
let canvasRect = canvas.getBoundingClientRect();

if (parseInt(element.style.left) + elementRect.width > canvasRect.width * zoomFactor) {
element.style.left = (canvasRect.width * zoomFactor - elementRect.width) / zoomFactor + 'px';
}
if (parseInt(element.style.top) + elementRect.height > canvasRect.height * zoomFactor) {
element.style.top = (canvasRect.height * zoomFactor - elementRect.height) / zoomFactor + 'px';
}
if (parseInt(element.style.left) < 0) {
element.style.left = '0px';
}
if (parseInt(element.style.top) < 0) {
element.style.top = '0px';
}
});
});
	</script>

	<style>
		.selected {
			background-color: #18534F;
			color: white;
		}

		.canvas-area {
			position: relative;
			z-index: 1;
			transition: top 0.3s ease;
		}

		.flex.mb-4.justify-around {
			position: relative;
			z-index: 2;
		}
		.slider {
			-webkit-appearance: none;
			appearance: none;
			width: 100%;
			cursor: pointer;
			outline: none;
			overflow: hidden;
			border-radius: 16px;
		}

		.slider::-webkit-slider-runnable-track {
			height: 15px;
			background: #fff;
			border-radius: 16px;
		}

		.slider::-moz-range-track {
			height: 15px;
			background: #fff;
			border-radius: 16px;
		}

		.slider::-webkit-slider-thumb {
			-webkit-appearance: none;
			appearance: none;
			height: 15px;
			width: 15px;
			background-color: #fff;
			border-radius: 50%;
			border: 2px solid #18534F;
			box-shadow: -407px 0 0 400px #18534F;
		}

		.slider::-moz-range-thumb {
			height: 15px;
			width: 15px;
			background-color: #18534F;
			border-radius: 50%;
			border: 1px solid #18534F;
			box-shadow: -407px 0 0 400px #18534F;
		}

		output {
			color: #226D68;
		}
	</style>
{% endblock %}
