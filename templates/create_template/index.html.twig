{% extends 'base.html.twig' %}

{% block title %}Create template{% endblock %}

{% block body %}
<section data-controller="form" class="p-6 bg-gray-100">
    <h1 class="text-2xl font-bold mb-4 text-primary">Create a new template</h1>
    <div class="flex">
        <div class="w-1/3 pr-4 ml-10">
            <p class="mb-2 text-primary text-xl font-bold mb-6">Template</p>
            <a href="/home" class="rounded-lg border border-secondary px-4 py-2 text-primary font-bold">Changer de template</a>

				<div id="templateEditPane" class="tab-pane bg-secondary p-4 rounded shadow mt-5">
					<div class="flex">
						<button id="templateEditBtn" class="bg-clear text-primary py-2 px-4 rounded w-1/2 selected">Paramètres du template</button>
						<button id="elementEditBtn" class="bg-clear text-primary py-2 px-4 rounded w-1/2">Propriété de l'élément</button>
					</div>
					{{ form_start(form, {'action': path('save_template', {'id': template.id}), 'method': 'POST'}) }}
					{{ form_widget(form) | raw }}
					<label for="color" class="text-white mt-2">Couleur :</label>
					<div class="flex items-center flex-row flex-wrap gap-3 mt-3">
						{% for color in template.color %}
							<input type="color" name="color" value="{{ color }}" class="w-8 h-8" disabled>
						{% endfor %}
					</div>
					<button type="submit" class="save-template-btn rounded-lg border border-secondary px-4 py-2 text-primary font-bold block w-fit mt-5">Enregistrer le template</button>
					{{ form_end(form) }}
				</div>
				<div id="elementEditPane" class="tab-pane bg-secondary p-4 rounded shadow hidden mt-5">
					<div class="flex">
						<button id="templateEditBtn1" class="bg-clear text-primary py-2 px-4 rounded w-1/2">Paramètres du template</button>
						<button id="elementEditBtn1" class="bg-clear text-primary py-2 px-4 rounded w-1/2 selected">Propriété de l'élément</button>
					</div>
					<div>
						<turbo-frame id="formContainer" data-form-target="formContainer" class="w-full"><!-- Le formulaire sera injecté ici --></turbo-frame>
					</div>
				</div>
			</div>

        <div class="w-2/3 pl-4">
            <div class="flex mb-4 justify-around">
                <button id="addImage" data-action="click->form#loadForm" data-url="{{ path('form_image') }}" class="bg-orangeCustom text-white py-1 px-2 rounded mb-2 flex flex-col items-center">
                    <img src="{{ asset('images/image.png') }}" alt="Ajouter Image" class="h-14 mb-1">
                    Ajouter Image
                </button>

					<button data-action="click->form#loadForm" data-url="{{ path('form_qrcode') }}" class="bg-orangeCustom text-white py-1 px-2 rounded mb-2 flex flex-col items-center">
						<img src="{{ asset('images/qrCode.png') }}" alt="Ajouter QrCode" class="h-14 mb-1">
						Ajouter QR Code
					</button>
					<button id="addText" data-action="click->form#loadForm" data-url="{{ path('form_text') }}" class="bg-orangeCustom text-white py-1 px-2 rounded mb-2 flex flex-col items-center">
						<img src="{{ asset('images/text.png') }}" alt="Ajouter Text" class="h-14 mb-1">
						Ajouter Texte
					</button>
				</div>

				<div
					id="canvas" class="canvas-area bg-white p-4 rounded shadow mt-4" data-canva-width="{{ template.width }}" data-canva-height="{{ template.height }}">
				</div>
			</div>
		</div>
	</section>

	<style>
		.selected {
			background-color: #18534F;
			color: white;
		}

		.qr-code.selected{
        background: transparent;
    	}

		.qr-code img{
			max-width: 100%;
			max-height: 100%;
		}


		.canvas {
			text-align: center;
		}

		.canvas-area {
			border: 2px solid #333;
			position: relative;
			margin-top: 20px;
		}

		.draggable {
			position: absolute;
			cursor: move;
			padding: 10px;
			background-color: lightblue;
			border: 1px solid #ccc;
			border-radius: 4px;
		}
	</style>
	<script>
		let canvas = document.getElementById("canvas");
		let canvasWidth = canvas.getAttribute("data-canva-width");
		let canvasHeight = canvas.getAttribute("data-canva-height");
		canvas.style.width = canvasWidth + "px";
		canvas.style.height = canvasHeight + "px";
		document.addEventListener('DOMContentLoaded', function () {
			var templateEditBtn1 = document.getElementById('templateEditBtn1');
			var elementEditBtn1 = document.getElementById('elementEditBtn1');
			var templateEditBtn = document.getElementById('templateEditBtn');
			var elementEditBtn = document.getElementById('elementEditBtn');
			var templateEditPane = document.getElementById('templateEditPane');
			var elementEditPane = document.getElementById('elementEditPane');
			var uniqIdText = 0;
			let selectedElement = null;
			let zoomFactor = 1;

			templateEditBtn1.addEventListener('click', function () {
				templateEditPane.classList.remove('hidden');
				elementEditPane.classList.add('hidden');
				templateEditBtn.classList.add('selected');
				elementEditBtn.classList.remove('selected');
			});

			elementEditBtn.addEventListener('click', function () {
				elementEditPane.classList.remove('hidden');
				templateEditPane.classList.add('hidden');
				elementEditBtn.classList.add('selected');
				templateEditBtn.classList.remove('selected');
			});

			templateEditBtn.click();	

			let canvas = document.getElementById("canvas");
			let addTextBtn = document.getElementById("addText");
			let currentElement = null;  // Stocker l'élément actuellement sélectionné
			let count = 0;
			let tab =[]

			addTextBtn.addEventListener("click", function () {
				// Créer un nouvel élément de texte
				let newText = document.createElement("div");
				newText.classList.add("draggable");
				newText.innerText = "Déplacez-moi !";

				newText.style.width = "150px";
				newText.style.height = "50px";
				newText.style.top = "0px";
				newText.style.left = "0px";
				newText.style.position = "absolute";
				newText.style.color = "black";
				newText.style.backgroundColor = "transparent";
				newText.style.fontFamily = "Arial";
				newText.style.fontSize = "16px";
				newText.style.textAlign = "left";
				uniqIdText="text"+count;
				count++;
				newText.id=uniqIdText;

				canvas.appendChild(newText);


				makeDraggable(newText);
				
				// Ajouter l'écouteur d'événements
				newText.addEventListener('click', elementT);
				createTextElement(newText);
			});

			async function createTextElement(element) {
				// ajouter en bdd le text en utilisant ajax
				let data = {
					'type': 'text',
					'width': parseFloat(element.style.width),
					'height': parseFloat(element.style.height),
					'posY': parseFloat(element.style.top),
					'posX': parseFloat(element.style.left),
					'textColor': element.style.color,
					'backgroundColor': element.style.backgroundColor,
					'fontFamily': element.style.fontFamily,
					'fontSize': parseFloat(element.style.fontSize),
					'align': element.style.textAlign,
					'isBold': document.getElementById('text_bold') ? document.getElementById('text_bold').checked : false,
					'isItalic': document.getElementById('text_italic') ? document.getElementById('text_italic').checked : false,
					'placeHolder': element.innerText,
					'inputAssocie': document.getElementById('text_inputAssocie') ? document.getElementById('text_inputAssocie').value : '',
				};

				let response = await fetch("/create-element/add-element", {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify(data),
				});

				let result = await response.json();
				element.id = result.id;
				console.log(result);
			}

			async function updateTextElement(element) {
				// ajouter en bdd le text en utilisant ajax
				let data = {
					'id': element.id,
					'type': 'text',
					'width': parseFloat(element.style.width),
					'height': parseFloat(element.style.height),
					'posY': parseFloat(element.style.top),
					'posX': parseFloat(element.style.left),
					'textColor': element.style.color,
					'backgroundColor': element.style.backgroundColor,
					'fontFamily': element.style.fontFamily,
					'fontSize': parseFloat(element.style.fontSize),
					'align': element.style.textAlign,
					'isBold': document.getElementById('text_bold').checked,
					'isItalic': document.getElementById('text_italic').checked,
					'placeHolder': element.innerText,
					'inputAssocie': document.getElementById('text_inputAssocie').value,
				};

				let response = await fetch("/create-element/add-element", {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify(data),
				});

				let result = await response.json();
				console.log(result);
			}


			function elementT(event){
					tab.shift();
					tab.push(event.target);
					selectElement(event.target);
				}

			// Fonction pour sélectionner un élément
			function selectElement(element) {
				if (currentElement) {
					cur=currentElement
					currentElement=null;
					// Désélectionner l'élément précédent (si nécessaire)
					cur.style.color=document.getElementById('text_textColor').value;
					cur.classList.remove('selected-element'); 
				}
				currentElement = element;  // Mettre à jour l'élément sélectionné
				currentElement.classList.add('selected-element');  // Ajouter une classe de sélection
				currentElement.style.color='white';
				// Mettre à jour les sliders de position avec les valeurs actuelles
				let canvasRect = canvas.getBoundingClientRect();
				let leftPercentage = (parseInt(currentElement.style.left) / canvasRect.width) * 100;//mettre en pourcentage
				let topPercentage = (parseInt(currentElement.style.top) / canvasRect.height) * 100;
				document.getElementById('text_posX').value = Math.round(leftPercentage);
				document.getElementById('text_posY').value = Math.round(topPercentage);
				document.getElementById('text_width').value =(currentElement.clientWidth/canvasRect.width) * 100;
				document.getElementById('text_height').value =(currentElement.clientHeight/canvasRect.height) * 100;
				document.getElementById('text_inputAssocie').value =currentElement.textContent;
				document.getElementById('text_textColor').value=currentElement.style.color;
				// Mettre à jour les sliders pour changer la position de l'élément sélectionné
				if (currentElement.classList.contains('selected-element')){
					changePosX();
					changePosY();
				}
			}

			function makeDraggable(element) {
				let isDragging = false;
				let offsetX,
				offsetY;
				let canvasRect = canvas.getBoundingClientRect();

				element.addEventListener("mousedown", function (e) {
				isDragging = true;
				offsetX = e.clientX - parseInt(window.getComputedStyle(element).left);
				offsetY = e.clientY - parseInt(window.getComputedStyle(element).top);

				updateElement(element);
				updateTextElement(element);

			});

			document.addEventListener("mousemove", function (e) {
				if (isDragging) {
					newLeft = (e.clientX - offsetX * zoomFactor);
					newTop = (e.clientY - offsetY * zoomFactor);

					let elementRect = element.getBoundingClientRect();

					if (newLeft < 0) 
					newLeft = 0;

					if (newTop < 0) 
					newTop = 0;

					if (newLeft + elementRect.width > canvasRect.width * zoomFactor) {
						newLeft = canvasRect.width * zoomFactor - elementRect.width;
					}
					if (newTop + elementRect.height > canvasRect.height * zoomFactor) {
						newTop = canvasRect.height * zoomFactor - elementRect.height;
					}

					element.style.left = newLeft + "px";
					element.style.top = newTop + "px";

					// Mettre à jour la valeur du slider en fonction de la position X
					// Vous pouvez choisir la logique de mapping que vous préférez ici
					let sliderValue = Math.round((newLeft / canvasRect.width) * 100); // Convertir la position en pourcentage
					let sliderValueY = Math.round((newTop / canvasRect.height) * 100);
					// Convertir la position en pourcentage
					// document.querySelector('input[type=range]').value = sliderValue;
					document.getElementById('text_posX').value = sliderValue;
					document.getElementById('text_posY').value = sliderValueY;
					document.getElementById('text_width').value =(element.clientWidth/canvasRect.width) * 100;
					document.getElementById('text_height').value =(element.clientHeight/canvasRect.height) * 100;
					document.getElementById('text_inputAssocie').value =element.textContent;
					document.getElementById('text_textColor').value=element.style.color;
				}
			});

			function updateElement(element) { // mettre a jour la largeur selon le slider
				console.log(element);
				document.getElementById('text_width').addEventListener('input', function () {
					let canvasRect = canvas.getBoundingClientRect();
					let elementRect = element.getBoundingClientRect();

					console.log('Element');
					console.log(elementRect);
					console.log('Canva');

					console.log(canvasRect);
					console.log(element.height)

					if (elementRect.right < canvasRect.right) {
						element.style.width = this.value + '%';
					} else { // disable text_width
						document.getElementById('text_width').disabled = true;
					}
				});

				document.getElementById('text_height').addEventListener('input', function () {
				let canvasRect = canvas.getBoundingClientRect();
				let elementRect = element.getBoundingClientRect();

					if (elementRect.bottom<canvasRect.bottom ){
						element.style.height = this.value + '%';
					} else{
						//disable text_width
						document.getElementById('text_height').disabled = true;
					}

					updateTextElement(element);
				});

				document.getElementById('text_inputAssocie').addEventListener('input', function() {
					element.innerText = this.value;
					updateTextElement(element);
				});

				document.getElementById('text_placeholder').addEventListener('input', function() {
					element.innerText = this.value;
					updateTextElement(element);
				});
				document.getElementById('text_textColor').addEventListener('input', function() {
					element.style.color = this.value;
					updateTextElement(element);
				});

				document.getElementById('text_backgroundColor').addEventListener('input', function() {
					element.style.backgroundColor = this.value;
					updateTextElement(element);
				});

				document.getElementById('text_align').addEventListener('input', function() {
					element.style.display = 'flex';

					element.style.alignItems = 'center'; // Aligner verticalement par défaut
					element.style.position = 'relative'; // Assurez-vous que l'élément est positionné

					// Top alignments
					if (this.value == 'top-left') {
						element.style.justifyContent = 'flex-start'; // Aligné à gauche
						element.style.alignItems = 'flex-start'; // Aligné en haut
					}
					if (this.value == 'top-center') {
						element.style.justifyContent = 'center'; // Aligné au centre
						element.style.alignItems = 'flex-start'; // Aligné en haut
					}
					if (this.value == 'top-right') {
						element.style.justifyContent = 'flex-end'; // Aligné à droite
						element.style.alignItems = 'flex-start'; // Aligné en haut
					}

					// Middle alignments
					if (this.value == 'center-left') {
						element.style.justifyContent = 'flex-start'; // Aligné à gauche
								// Aligné au milieu verticalement
					}

					if (this.value == 'center-center') {
						element.style.justifyContent = 'center';       // Aligné au milieu verticalement
					}

					if (this.value == 'center-right') {
						element.style.justifyContent = 'flex-end';       // Aligné au milieu verticalement
					}

					// Bottom alignments
					if (this.value == 'bottom-left') {
						element.style.justifyContent = 'flex-start'; // Aligné à gauche
						element.style.alignItems = 'flex-end'; // Aligné en bas
					}
					if (this.value == 'bottom-center') {
						element.style.justifyContent = 'center'; // Aligné au centre
						element.style.alignItems = 'flex-end'; // Aligné en bas
					}
					if (this.value == 'bottom-right') {
						element.style.justifyContent = 'flex-end'; // Aligné à droite
						element.style.alignItems = 'flex-end'; // Aligné en bas
					}
					updateTextElement(element);
				});

				document.getElementById('text_bold').addEventListener('change', function() {
					if (this.checked) {
						element.style.fontWeight = 'bold';
					} else {
						element.style.fontWeight = 'normal';
					}
					updateTextElement(element);
				});

				document.getElementById('text_italic').addEventListener('change', function() {
					if (this.checked) {
						element.style.fontStyle = 'italic'; // Appliquer l'italique
					} else {
						element.style.fontStyle = 'normal'; // Revenir au texte normal
					}
					updateTextElement(element);
				});

				document.getElementById('text_fontSize').addEventListener('input', function() {
					element.style.fontSize = this.value + 'px';
					updateTextElement(element);
				});

				document.getElementById('text_fontFamily').addEventListener('change', function() {
					element.style.fontFamily = this.value;
					updateTextElement(element);
				});
			}

			document.addEventListener("mouseup", function () {
				isDragging = false;
			});


			document.getElementById(uniqIdText).addEventListener('click', function(event) {
				// Récupérer l'élément cible

				const currentTarget = event.target;
				console.log(currentTarget);

				let tab=[];

				if (currentTarget.classList.contains('draggable')) {
					tab.push(currentTarget);
					console.log(tab);
					changePosX(tab[0]);
					changePosY(tab[0]);
					tab=[];
					console.log(tab);
				}

			});
				//delete

			}


			function changePosX(element){
				let canvasRect = canvas.getBoundingClientRect();
				let elementRect = element.getBoundingClientRect();

				document.getElementById('text_posX').addEventListener('input', function() {

					//convertie en entier
					let intElement = parseInt(elementRect.right);
					let intCanvas = parseInt(canvasRect.right);
					console.log(intElement);
					console.log(intCanvas);
					console.log(elementRect)
					console.log(canvasRect)
					let largeur=elementRect.left+elementRect.width;

					if(intElement>= intCanvas) {
						document.getElementById('text_posX').disabled = true;
					}
					element.style.left = this.value + '%';
					updateTextElement(element);
				});


			}
			function changePosY(element) {
				let canvasRect = canvas.getBoundingClientRect();
				let elementRect = element.getBoundingClientRect();
				if (elementRect.bottom < canvasRect.bottom) {
					document.getElementById('text_posY').addEventListener('input', function () {
					element.style.top = this.value + '%';
					updateTextElement(element);
				});
				}
			}
		});
</script>

			<style>
				.selected {
					background-color: #18534F;
					color: white;
				}

				.canvas-area {
					position: relative;
					z-index: 1;
					transition: top 0.3s ease;
				}

				.flex.mb-4.justify-around {
					position: relative;
					z-index: 2;
				}
				.slider {
					-webkit-appearance: none;
					appearance: none;
					width: 100%;
					cursor: pointer;
					outline: none;
					overflow: hidden;
					border-radius: 16px;
				}

				.slider::-webkit-slider-runnable-track {
					height: 15px;
					background: #fff;
					border-radius: 16px;
				}

				.slider::-moz-range-track {
					height: 15px;
					background: #fff;
					border-radius: 16px;
				}

				.slider::-webkit-slider-thumb {
					-webkit-appearance: none;
					appearance: none;
					height: 15px;
					width: 15px;
					background-color: #fff;
					border-radius: 50%;
					border: 2px solid #18534F;
					box-shadow: -407px 0 0 400px #18534F;
				}

				.slider::-moz-range-thumb {
					height: 15px;
					width: 15px;
					background-color: #18534F;
					border-radius: 50%;
					border: 1px solid #18534F;
					box-shadow: -407px 0 0 400px #18534F;
				}

				output {
					color: #226D68;
				}
			</style>
		{% endblock %}
